x-base-service: &base-service
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  influxdb:
    <<: *base-service
    image: influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=your_database_name
      - INFLUXDB_ORG=Home
    volumes:
      - ./influxdb/data:/var/lib/influxdb2:rw
      - ./influxdb/config/config.yaml:/etc/influxdb2/config.yaml:ro

  grafana:
    <<: *base-service
    image: grafana/grafana
    user: ${USER_UID}:1000
    environment:
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
    ports:
      - ${GRAFANA_UI_PORT}:3000
    volumes:
      - ./grafana/config:/etc/grafana/provisioning/datasources:ro
      - ./grafana/data:/var/lib/grafana:rw
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:rw
    depends_on:
      - influxdb
      - loki

  mqtt-broker:
    <<: *base-service
    image: eclipse-mosquitto:2
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mosquitto/config/passwd:/mosquitto/config/passwd:rw

  telegraf:
    <<: *base-service
    image: telegraf:latest
    environment:
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
      - mqtt-broker

  mqtt-explorer:
    <<: *base-service
    image: smeagolworms4/mqtt-explorer
    user: ${USER_UID}:1000
    ports:
      - ${MQTT_EXPLORER_UI_PORT}:4000
    volumes:
      - ./mqtt-explorer/config:/mqtt-explorer/config:rw
    depends_on:
      - mqtt-broker

  trigger:
    <<: *base-service
    build: python-apps
    command: python trigger.py
    env_file:
      - .env
    volumes:
      - ./python-apps/src:/app:ro
    depends_on:
      - mqtt-broker

  pseudo-mqtt-sensor:
    <<: *base-service
    build: python-apps
    command: python pseudo-sensor.py
    env_file:
      - .env
    volumes:
      - ./python-apps/src:/app:ro
    depends_on:
      - mqtt-broker
      - trigger

  promtail:
    <<: *base-service
    image: grafana/promtail:2.8.2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
      - ./promtail/config.yaml:/etc/promtail/config.yaml:ro
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki

  loki:
    <<: *base-service
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config.yaml:/etc/loki/local-config.yaml:ro

  node-exporter:
    <<: *base-service
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100

  prometheus:
    <<: *base-service
    image: prom/prometheus:latest
    container_name: prometheus
    user: root
    volumes:
      - ./prometheus/config/config.yaml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/data:/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - ${PROMETHEUS_UI_PORT}:9090
